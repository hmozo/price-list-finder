/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.indit.pricelist.contexts.shop.pricelists.controller.openapi;

import com.indit.pricelist.contexts.shop.pricelists.application.exceptions.ErrorResponseDetails;
import com.indit.pricelist.contexts.shop.pricelists.controller.dto.PriceListResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-18T16:25:31.523601600+01:00[Europe/Paris]")
@Validated
@Tag(name = "price-list-controller", description = "the price-list-controller API")
public interface PriceListControllerBase {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /v1/price-lists : Get price-tariff applied to the product within a date-range
     * Find the price-tariff based on a productId, brandId and effectiveDate
     *
     * @param effectiveDate  (required)
     * @param productId  (required)
     * @param brandId  (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getPriceListByDateProductBrand",
        summary = "Get price-tariff applied to the product within a date-range",
        description = "Find the price-tariff based on a productId, brandId and effectiveDate",
        tags = { "price-list-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceListResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDetails.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/price-lists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PriceListResponse> getPriceListByDateProductBrand(
        @NotNull @Parameter(name = "effective-date", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "effective-date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime effectiveDate,
        @NotNull @Parameter(name = "product-id", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "product-id", required = true) Long productId,
        @NotNull @Parameter(name = "brand-id", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "brand-id", required = true) Integer brandId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"productId\" : 0, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 5.962133916683182, \"brandId\" : 6, \"priceListId\" : 1, \"currency\" : \"currency\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
